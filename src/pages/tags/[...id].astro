---
import BlogCard from '@/components/BlogCard.astro'
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PageHead from '@/components/PageHead.astro'
import Layout from '@/layouts/Layout.astro'
import { Icon } from 'astro-icon/components'
import { type CollectionEntry, getCollection } from 'astro:content'

type BlogPost = CollectionEntry<'blog'>

type Props = {
  tag: string
  posts: BlogPost[]
}

const { tag, posts } = Astro.props

export async function getStaticPaths() {
  const posts = await getCollection('blog')
  const tags = posts.flatMap((post) => post.data.tags || [])
  const uniqueTags = Array.from(
    new Set(tags.filter((tag): tag is string => typeof tag === 'string')),
  )

  return uniqueTags.map((tag) => ({
    params: { id: tag },
    props: {
      tag,
      posts: posts.filter((post) => post.data.tags?.includes(tag)),
    },
  }))
}
---

<Layout>
  <PageHead
    slot="head"
    title={`Posts tagged with "${tag}"`}
    description={`A collection of posts tagged with ${tag}.`}
  />
  <Breadcrumbs
    items={[
      { href: '/tags', label: 'Tags', icon: 'lucide:tags' },
      { label: tag, icon: 'lucide:tag' },
    ]}
  />
  <div class="flex flex-wrap items-center gap-2">
    <h1 class="text-3xl font-medium">Posts tagged with</h1>
    <span
      class="bg-secondary flex items-center gap-x-1 rounded-full px-4 py-2 text-2xl font-medium"
    >
      <Icon name="lucide:hash" class="size-6 -translate-x-0.5" />{tag}
    </span>
  </div>
  <div class="flex flex-col gap-y-4">
    {
      posts.map((post) => (
        <section class="flex flex-col gap-y-4">
          <div>
            <ul class="flex flex-col gap-4">
              <li>
                <BlogCard entry={post} />
              </li>
            </ul>
          </div>
        </section>
      ))
    }
  </div>
</Layout>
