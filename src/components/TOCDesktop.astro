---
import { ScrollArea } from '@/components/ui/scroll-area'
import { cn } from '@/lib/utils'
import type { MarkdownHeading } from 'astro'

type Props = {
  headings: MarkdownHeading[]
}

const { headings } = Astro.props

function getHeadingMargin(depth: number): string {
  const margins: Record<number, string> = {
    3: 'ml-4',
    4: 'ml-8',
    5: 'ml-12',
    6: 'ml-16',
  }
  return margins[depth] || ''
}
---

<div class="sticky top-20 hidden h-[calc(100vh-5rem)] max-w-fit xl:block col-start-1 row-span-1 mr-8 ml-auto">
  <ScrollArea
    client:load
    className="flex max-h-[calc(100vh-8rem)] flex-col overflow-y-auto"
    type="always"
  >
    <ul
      class="flex list-none flex-col gap-y-2 px-4 mr-8"
      id="table-of-contents"
    >
      <li class="text-lg font-medium">Table of Contents</li>
      {
        headings.map((heading) => (
          <li
            class={cn(
              'text-foreground/60 text-sm',
              getHeadingMargin(heading.depth),
            )}
          >
            <a
              href={`#${heading.slug}`}
              class="marker:text-foreground/30 list-none underline decoration-transparent underline-offset-[3px] transition-colors duration-200 hover:decoration-inherit"
            >
              {heading.text}
            </a>
          </li>
        ))
      }
    </ul>
  </ScrollArea>
</div>

<script>
  function setupToc() {
    const header = document.querySelector('header')
    const headerHeight = header ? header.offsetHeight : 0

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const headingElement = entry.target
          if (!headingElement) return

          const id = headingElement.getAttribute('id')
          const link = document.querySelector(
            `#table-of-contents li a[href="#${id}"]`,
          )
          if (!link) return

          if (entry.isIntersecting) {
            link.classList.add('text-foreground')
          } else {
            link.classList.remove('text-foreground')
          }
        })
      },
      {
        rootMargin: `-${headerHeight}px 0px 0px 0px`,
      },
    )

    const headings = document.querySelectorAll(
      '.prose h2, .prose h3, .prose h4, .prose h5, .prose h6',
    )
    headings.forEach((heading) => {
      observer.observe(heading)
    })
  }

  document.addEventListener('astro:page-load', setupToc)
  document.addEventListener('astro:after-swap', setupToc)
</script>
